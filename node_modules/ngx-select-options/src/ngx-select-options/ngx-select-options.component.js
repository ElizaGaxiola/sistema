"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var noop = function () {
};
exports.CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return NgxSelectOptionsComponent; }),
    multi: true
};
var styles = "\nselect {\n  width: 100%; }\n\n.dropdown-menu {\n  overflow: auto;\n  max-height: 500px;\n  margin-bottom: 1em; }\n\n.dropdown-item {\n  line-height: 1.5em;\n  font-size: 0.9em; }\n  .dropdown-item.selected {\n    background-color: #0275d8;\n    color: #fff; }\n  .dropdown-item.searchFieldItem {\n    background-color: transparent; }\n    .dropdown-item.searchFieldItem .form-control {\n      border: none;\n      margin: 0;\n      padding: 0.5rem 0; }\n\n.form-group {\n  margin: 0;\n  font-size: 0.9em; }\n";
var NgxSelectOptionsComponent = (function () {
    function NgxSelectOptionsComponent(element) {
        this._options = [];
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.innerValue = '';
        this.searchField = '';
        this.placeholder = 'Wybierz...';
        this.searchText = 'Wyszukaj...';
        this.selected = new core_1.EventEmitter();
        this.element = element;
    }
    Object.defineProperty(NgxSelectOptionsComponent.prototype, "options", {
        set: function (value) {
            if (!value) {
                this._options = [];
            }
            else {
                this._options = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxSelectOptionsComponent.prototype, "value", {
        get: function () {
            return this.innerValue;
        },
        set: function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    NgxSelectOptionsComponent.prototype.selectOption = function (value, e) {
        if (e) {
            e.preventDefault();
        }
        if (!this.checkIsOptions) {
            return;
        }
        this.value = value;
    };
    NgxSelectOptionsComponent.prototype.checkIsOptions = function () {
        return !!this._options;
    };
    NgxSelectOptionsComponent.prototype.openDropdown = function (e) {
        var _this = this;
        setTimeout(function () {
            var el = _this.element.nativeElement.querySelector('.dropdown-menu input');
            if (el) {
                el.focus();
            }
        }, 0);
    };
    NgxSelectOptionsComponent.prototype.writeValue = function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    };
    NgxSelectOptionsComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    NgxSelectOptionsComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    return NgxSelectOptionsComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], NgxSelectOptionsComponent.prototype, "placeholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], NgxSelectOptionsComponent.prototype, "searchText", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], NgxSelectOptionsComponent.prototype, "options", null);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], NgxSelectOptionsComponent.prototype, "selected", void 0);
NgxSelectOptionsComponent = __decorate([
    core_1.Component({
        selector: 'ngx-select-options',
        template: "\n    <div class=\"dropdown\">\n      <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" (click)=\"openDropdown($event)\">\n        {{!value ? placeholder : (value | ngxSelectOptions:_options)}}\n      </button>\n      <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n        <div class=\"dropdown-item searchFieldItem\">\n          <div class=\"form-group\">\n            <input class=\"form-control\" [placeholder]=\"searchText\" [(ngModel)]=\"searchField\" name=\"searchField\">\n          </div>\n        </div>\n        <a class=\"dropdown-item\" href=\"#\" *ngFor=\"let option of _options | ngxSelectOptionsFilter:searchField\" (click)=\"selectOption(option.value, $event)\" [class.selected]=\"value === option.value\">{{option.label}}</a>\n      </div>\n    </div>\n  ",
        styles: [styles],
        providers: [exports.CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], NgxSelectOptionsComponent);
exports.NgxSelectOptionsComponent = NgxSelectOptionsComponent;
//# sourceMappingURL=ngx-select-options.component.js.map